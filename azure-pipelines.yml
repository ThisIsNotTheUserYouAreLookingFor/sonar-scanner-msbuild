# SonarScanner for MSBuild
# Build, QA, Deploy

schedules:
  # Run from Monday to Friday at 2:0 UTC (https://docs.microsoft.com/en-us/azure/devops/pipelines/process/scheduled-triggers?view=azure-devops&tabs=yaml#cron-syntax)
  - cron: "0 2 * * 1-5"
    displayName: Nightly build
    branches:
      include:
        - master
    always: true

trigger:
  - master

pool:
  vmImage: 'windows-latest'

variables:
  - group: sonarsource-build-variables
  - group: sonar-scanner-dotnet-variables
  - group: artifactory_access
  - group: digicert-keylocker
  # ARTIFACTORY_URL https://repox.jfrog.io/repox => https://repox.jfrog.io/artifactory
  # JFROG_URL https://repox.jfrog.io
  # https://github.com/SonarSource/parent-oss/blob/master/pom.xml#L708-L711
  - name: ARTIFACTORY_DEPLOY_USERNAME
    value: $[variables.ARTIFACTORY_QA_DEPLOYER_USERNAME]
  # ~https://github.com/SonarSource/re-ci-images/blob/master/docker/mvn/settings-private.xml
  - name: ARTIFACTORY_PRIVATE_USERNAME
    value: $[variables.ARTIFACTORY_PRIVATE_READER_USERNAME]
  - name: ARTIFACTORY_QA_READER_USERNAME
    value: $[variables.ARTIFACTORY_PRIVATE_READER_USERNAME]
  # pipelines-yaml-templates/promote-stage.yml line 56
  - name: ARTIFACTORY_API_USER
    value: $[variables.ARTIFACTORY_PROMOTER_USERNAME]
  - name: ARTIFACTORY_API_KEY
    value: $[variables.ARTIFACTORY_PROMOTER_ACCESS_TOKEN]
  - name: IS_RELEASE_BRANCH
    value: ${{ or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/branch-')) }}

resources:
  repositories:
    - repository: commonTemplates
      type: git
      name: pipelines-yaml-templates
      ref: refs/tags/v1.0.11

stages:
  - template: stage-with-burgr-notifications.yml@commonTemplates
    parameters:
      burgrName: 'build'
      burgrType: 'build'
      stageName: 'build'
      stageDisplayName: 'Build:'
      jobs:
        - job: build
          displayName: 'Build, UT, analyze on SonarCloud and stage to repox'
          workspace:
            clean: all
          variables:
            solution: 'SonarScanner.MSBuild.sln'
            tfsProcessorSolution: 'SonarScanner.MSBuild.TFS.sln'
            sonarCloudOrganization: 'sonarsource'
            sonarCloudMsBuildProjectKey: 'sonarscanner-msbuild'
            sonarCloudMsBuildProjectName: 'SonarScanner for .NET'
            buildPlatform: 'Any CPU'
            buildConfiguration: 'Release'
            MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
            MAVEN_OPTS: '-Xmx3072m -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
            commonMavenArguments: -B -Pdeploy-sonarsource -Dmaven.test.skip=true
          steps:
            - checkout: self
            - task: NuGetToolInstaller@1
              displayName: 'Use NuGet 5.7.0'
              inputs:
                versionSpec: '5.7.0'
            - task: CacheBeta@0
              enabled: true
              displayName: Cache Maven local repo
              inputs:
                key: maven | pom.xml
                path: $(MAVEN_CACHE_FOLDER)

            - task: DownloadSecureFile@1
              name: snk
              inputs:
                secureFile: 'SonarSourceSecret.snk'
              displayName: 'Download snk'

            - task: DownloadSecureFile@1
              # This file is used by the "DigiCert Signing Manager KSP" Key Storage Provider to authenticate against the DigiCert private key provider server.
              name: SM_CLIENT_CERT
              displayName: Download p12 file
              inputs:
                secureFile: digicert_authentication_certificate.p12

            - task: DownloadSecureFile@1
              # This file contains the signing certificate without the private key. The private key will be downloaded later, during the signing process.
              displayName: 'Download crt file'
              name: SM_CLIENT_CRT
              inputs:
                secureFile: cert_525594307.crt

            - task: SSMClientToolsSetup@1
              displayName: Client Tools Setup
              condition: eq(variables.IS_RELEASE_BRANCH, 'true')

            - task: SSMSigningToolsSetup@1
              displayName: Signing Tools Setup
              condition: eq(variables.IS_RELEASE_BRANCH, 'true')

            - task: PowerShell@2
              displayName: Synchronize certificates
              condition: eq(variables.IS_RELEASE_BRANCH, 'true')
              env:
                SM_CLIENT_CERT_FILE: $(SM_CLIENT_CERT.secureFilePath)
                SM_CLIENT_CERT_PASSWORD: $(SM_CLIENT_CERT_PASSWORD)
                SM_API_KEY: $(SM_API_KEY)
                SM_CERT: $(SM_CERT)
              # Initialize the DigiCert Private Key Provider.
              # What we think it does: The smctl tool authenticates with a client certificate (SM_CLIENT_CERT_FILE) and a client password (SM_CLIENT_CERT_PASSWORD).
              # It uses an API Key (SM_API_KEY) and the ID of the certificate (SM_CERT) to check if the authenticated client is authorized to use the
              # certificate specified and synchronize (potentially private) information about the certificate.
              inputs:
                targetType: 'inline'
                script: |
                  Write-Output "smctl sync:"
                  smctl windows certsync

            - task: PowerShell@2
              displayName: 'Promote project version'
              inputs:
                targetType: 'inline'
                script: |
                  # Calculate the file path
                  $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
                  Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."

                  # Read the version from the file
                  [xml]$versionProps = Get-Content "$versionFilePath"
                  $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
                  Write-Host "Sonar project version is '${sonarProjectVersion}'"
                  # Set the variable to it can be used by other tasks
                  Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION]$sonarProjectVersion"

            - task: VSBuild@1
              displayName: 'Set BranchName, Sha1 and BuildNumber properties from Azdo pipeline variables'
              inputs:
                solution: 'scripts\version\ChangeVersion.proj'
                msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId)  /p:BuildConfiguration=$(BuildConfiguration)'

            - task: SonarCloudPrepare@1
              displayName: 'Prepare analysis on SonarCloud'
              inputs:
                SonarCloud: 'SonarCloud'
                organization: '$(sonarCloudOrganization)'
                projectKey: '$(sonarCloudMsBuildProjectKey)'
                projectName: '$(sonarCloudMsBuildProjectName)'
                projectVersion: '$(SONAR_PROJECT_VERSION)'
                scannerMode: MSBuild
                extraProperties: |
                  sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/coverage/**.xml"
                  sonar.cs.vstest.reportsPaths="$(Build.SourcesDirectory)/TestResults/*.trx"

            - task: DotNetCoreCLI@2
              displayName: Dotnet restore $(tfsProcessorSolution)
              inputs:
                command: 'restore'
                projects: '$(tfsProcessorSolution)'
                feedsToUse: 'config'
                nugetConfigPath: 'NuGet.Config'
                verbosityRestore: 'normal'  # Default is noisy 'Detailed'

            - task: DotNetCoreCLI@2
              env:
                SignAssembly: $(IS_RELEASE_BRANCH)
              condition: and(succeeded(), eq(variables.IS_RELEASE_BRANCH, 'true'))
              displayName: 'Build and prepare signing $(tfsProcessorSolution)'
              inputs:
                command: 'build'
                projects: '$(tfsProcessorSolution)'
                arguments: '/m /p:DeployExtension=false /p:platform="$(BuildPlatform)" /p:configuration=$(BuildConfiguration) /p:ZipPackageCompressionLevel=normal /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)"'

            - task: DotNetCoreCLI@2
              condition: and(succeeded(), eq(variables.IS_RELEASE_BRANCH, 'false')) # This should run only on PRs (master and other release branches need signing)
              displayName: 'Build $(tfsProcessorSolution)'
              inputs:
                command: 'build'
                projects: '$(tfsProcessorSolution)'
                arguments: '/m /p:DeployExtension=false /p:platform="$(BuildPlatform)" /p:configuration=$(BuildConfiguration) /p:ZipPackageCompressionLevel=normal'

            - task: DotNetCoreCLI@2
              displayName: Dotnet restore $(solution)
              inputs:
                command: 'restore'
                projects: '$(solution)'
                feedsToUse: 'config'
                nugetConfigPath: 'NuGet.Config'
                verbosityRestore: 'normal'  # Default is noisy 'Detailed'

            - task: DotNetCoreCLI@2
              displayName: Install CycloneDX
              inputs:
                command: custom
                custom: tool
                feedsToUse: 'select'
                includeNuGetOrg: true
                arguments: 'install --global CycloneDX'

            - task: DotNetCoreCLI@2
              displayName: Dotnet generate SBOM
              inputs:
                command: custom
                custom: CycloneDX
                projects: '$(solution)'
                arguments: '-t -j -o build'

            - task: DotNetCoreCLI@2
              env:
                SignAssembly: $(IS_RELEASE_BRANCH)
              condition: and(succeeded(), eq(variables.IS_RELEASE_BRANCH, 'true'))
              displayName: 'Build and prepare signing $(solution)'
              inputs:
                command: 'build'
                projects: '$(solution)'
                arguments: '/m /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /p:configuration=$(BuildConfiguration) /p:platform="$(BuildPlatform)" /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)"'

            - task: DotNetCoreCLI@2
              condition: and(succeeded(), eq(variables.IS_RELEASE_BRANCH, 'false')) # This should run only on PRs (master and other release branches need signing)
              displayName: 'Build $(solution)'
              inputs:
                command: 'build'
                projects: '$(solution)'
                arguments: '/m /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /p:configuration=$(BuildConfiguration) /p:platform="$(BuildPlatform)"'

            - powershell: |
                . .\scripts\utils.ps1
                mkdir $(Build.SourcesDirectory)\coverage\

                function Run-Tests-With-Coverage {
                  param (
                    $projectPath
                  )
                  dotnet test $projectPath --configuration $(BuildConfiguration) --results-directory "$(Build.SourcesDirectory)\TestResults" --no-build --no-restore -l trx
                  Test-ExitCode "ERROR: Unit tests for '$projectPath' FAILED."
                }

                dotnet --info

                Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Common.Test\SonarScanner.MSBuild.Common.Test.csproj
                Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.PostProcessor.Test\SonarScanner.MSBuild.PostProcessor.Test.csproj
                Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.PreProcessor.Test\SonarScanner.MSBuild.PreProcessor.Test.csproj
                Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Shim.Test\SonarScanner.MSBuild.Shim.Test.csproj
                Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.TFS.Test\SonarScanner.MSBuild.TFS.Test.csproj
                Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Tasks.IntegrationTest\SonarScanner.MSBuild.Tasks.IntegrationTest.csproj
                Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Test\SonarScanner.MSBuild.Test.csproj
                Run-Tests-With-Coverage Tests\SonarScanner.MSBuild.Tasks.UnitTest\SonarScanner.MSBuild.Tasks.UnitTest.csproj # This one needs to be last to convert the coverage results, see Tests/Directory.Build.targets
              displayName: 'Run tests and compute coverage'

            - task: PublishBuildArtifacts@1
              inputs:
                pathToPublish: $(Build.SourcesDirectory)\coverage\
                artifactName: CoverageReport

            - task: PowerShell@2
              displayName: 'Delete files created by unit tests'
              inputs:
                targetType: 'inline'
                script: |
                  Get-ChildItem $(Agent.TempDirectory) -Filter 'dummy.*' -Recurse -Attributes !Directory | Remove-Item

            - task: SonarCloudAnalyze@1
              displayName: 'Run SonarCloud analysis'

            - task: PowerShell@2
              displayName: 'Sign and package scanner files'
              env:
                SIGNTOOL_PATH: 'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.17763.0\\x64\\signtool.exe'
                SM_CLIENT_CRT_FILE: $(SM_CLIENT_CRT.secureFilePath)
                SM_CLIENT_CERT_FILE: $(SM_CLIENT_CERT.secureFilePath)
                SM_CLIENT_CERT_PASSWORD: $(SM_CLIENT_CERT_PASSWORD)
                SM_API_KEY: $(SM_API_KEY)
                SM_CERT: $(SM_CERT)
              inputs:
                targetType: 'inline'
                script: |
                  . (Join-Path "scripts" "package-artifacts.ps1")
                  . (Join-Path "scripts" "variables.ps1")

                  Download-ScannerCli

                  $signAssemblies = [System.Convert]::ToBoolean("$(IS_RELEASE_BRANCH)") # the variable is a string, we need a boolean
                  Package-NetFrameworkScanner -SignAssemblies $signAssemblies
                  Package-NetScanner -SignAssemblies $signAssemblies
                pwsh: true

            - powershell: .\scripts\Mend\Mend-Scan.ps1
              condition: eq(variables.IS_RELEASE_BRANCH, 'true')
              env:
                JAVA_HOME_11_X64: '$(JAVA_HOME_11_X64)'
                WS_PRODUCTNAME: '$(MEND_PRODUCTNAME)'
                WS_APIKEY: '$(WHITESOURCE_APIKEY)'
              displayName: "Mend scan"

            - task: NuGetCommand@2
              displayName: 'Package dotnet global tool'
              inputs:
                command: 'pack'
                packagesToPack: 'nuspec\netcoreglobaltool\dotnet-sonarscanner.nuspec'
                packDestination: 'build'
                versioningScheme: 'off'

            - task: PowerShell@2
              displayName: "Sign NuGet packages"
              condition: and(succeeded(), eq(variables.IS_RELEASE_BRANCH, 'true'))
              env:
                PACKAGES_PATH: '$(Build.SourcesDirectory)\build\dotnet-sonarscanner*.nupkg'
                SM_CLIENT_CERT_FILE: $(SM_CLIENT_CERT.secureFilePath)
                SM_CLIENT_CERT_PASSWORD: $(SM_CLIENT_CERT_PASSWORD)
                SM_API_KEY: $(SM_API_KEY)
                SM_CERT: $(SM_CERT)
              inputs:
                targetType: 'inline'
                script: |
                  nuget sign "$env:PACKAGES_PATH" -Overwrite -HashAlgorithm SHA256 -CertificateFingerprint $(SM_CERT_FP) -Timestamper http://timestamp.digicert.com -TimestampHashAlgorithm SHA256

            - task: PowerShell@2
              displayName: 'Write project version in file'
              inputs:
                targetType: 'inline'
                script: |
                  Add-Content build/version.txt $(SONAR_PROJECT_VERSION)

            - task: DownloadSecureFile@1
              displayName: 'Download Maven settings'
              name: mavenSettings
              inputs:
                secureFile: 'maven-settings.xml'

            - task: PowerShell@2
              displayName: 'Generate packages'
              inputs:
                targetType: 'inline'
                script: |
                  [xml]$versionProps = Get-Content "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
                  $leakPeriodVersion = $versionProps.Project.PropertyGroup.MainVersion

                  $artifactsFolder = "$env:BUILD_SOURCESDIRECTORY\\build"
                  $version = $leakPeriodVersion + '.' + $env:BUILD_BUILDID

                  $netFrameworkScannerZipPath = Get-Item "$artifactsFolder\\sonarscanner-net-framework.zip"
                  $netScannerZipPath = Get-Item "$artifactsFolder\\sonarscanner-net.zip"
                  $netScannerGlobalToolPath = Get-Item "$artifactsFolder\\dotnet-sonarscanner.$leakPeriodVersion.nupkg"
                  $sbomJsonPath = Get-Item "$(Build.SourcesDirectory)\build\bom.json"

                  Write-Host "Generating the chocolatey packages"
                  $netFrameworkZipPath = (Get-FileHash $netFrameworkScannerZipPath -Algorithm SHA256).hash
                  $netFrameworkPs1 = "nuspec\chocolatey\chocolateyInstall-net-framework.ps1"
                  (Get-Content $netFrameworkPs1) `
                    -Replace '-Checksum "not-set"', "-Checksum $netFrameworkZipPath" `
                    -Replace "__PackageVersion__", "$version" `
                  | Set-Content $netFrameworkPs1

                  $netZipHash = (Get-FileHash $netScannerZipPath -Algorithm SHA256).hash
                  $netPs1 = "nuspec\chocolatey\chocolateyInstall-net.ps1"
                  (Get-Content $netPs1) `
                    -Replace '-Checksum "not-set"', "-Checksum $netZipHash" `
                    -Replace "__PackageVersion__", "$version" `
                  | Set-Content $netPs1

                  choco pack nuspec\chocolatey\sonarscanner-net-framework.nuspec `
                    --outputdirectory $artifactsFolder `
                    --version $version

                  choco pack nuspec\chocolatey\sonarscanner-net.nuspec `
                    --outputdirectory $artifactsFolder `
                    --version $version

                  Write-Host "Update artifacts locations in pom.xml"
                  $pomFile = ".\pom.xml"
                  (Get-Content $pomFile) `
                    -Replace 'netFrameworkScannerZipPath', "$netFrameworkScannerZipPath" `
                    -Replace 'netScannerZipPath', "$netScannerZipPath" `
                    -Replace 'netScannerGlobalToolPath', "$netScannerGlobalToolPath" `
                    -Replace 'netFrameworkScannerChocoPath', "$artifactsFolder\\sonarscanner-net-framework.$version.nupkg" `
                    -Replace 'netScannerChocoPath', "$artifactsFolder\\sonarscanner-net.$version.nupkg" `
                    -Replace 'sbomPath', "$sbomJsonPath" `
                  | Set-Content $pomFile

            - task: Maven@3
              displayName: Promote new version in pom
              inputs:
                mavenPomFile: 'pom.xml'
                goals: 'org.codehaus.mojo:versions-maven-plugin:2.2:set'
                options: >-
                  $(commonMavenArguments)
                  -DnewVersion=$(SONAR_PROJECT_VERSION).$(Build.BuildId)
                  --settings $(mavenSettings.secureFilePath)
                  -DgenerateBackupPoms=false -e
                javaHomeOption: 'JDKVersion'
                mavenVersionOption: 'Default'
                jdkVersionOption: '1.17'
                mavenOptions: $(MAVEN_OPTS)

            - task: DownloadSecureFile@1
              displayName: 'Download the sign key'
              name: signKey
              inputs:
                secureFile: 'sign-key.asc'

            - task: Maven@3
              displayName: 'Stage to repox'
              env:
                PROJECT_VERSION: $(SONAR_PROJECT_VERSION)
                BUILD_ID: $(Build.BuildId)
                ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_QA_DEPLOYER_ACCESS_TOKEN)
                PGP_SIGN_KEY_PATH: $(signKey.secureFilePath)
                PGP_PASSPHRASE: $(PGP_PASSPHRASE)
              inputs:
                goals: 'deploy'
                options: >-
                  $(commonMavenArguments)
                  --settings $(mavenSettings.secureFilePath)
                  -Pdeploy-sonarsource,sign -e -V
                publishJUnitResults: false
                javaHomeOption: 'JDKVersion'
                jdkVersionOption: '1.17'
                mavenOptions: $(MAVEN_OPTS)

            - task: PowerShell@2
              displayName: "Rename artifacts for GitHub Release"
              inputs:
                targetType: 'inline'
                script: |
                  $artifactsFolder = "$env:BUILD_SOURCESDIRECTORY\\build"
                  Rename-Item -Path "$artifactsFolder\\sonarscanner-net-framework.zip" -NewName sonar-scanner-$(SONAR_PROJECT_VERSION).$(Build.BuildId)-net-framework.zip
                  Rename-Item -Path "$artifactsFolder\\sonarscanner-net.zip" -NewName sonar-scanner-$(SONAR_PROJECT_VERSION).$(Build.BuildId)-net.zip

            - task: PowerShell@2
              displayName: "Copy documentation file"
              inputs:
                targetType: 'inline'
                script: |
                  Copy-Item "sonar-docs\\analysis\\scan\\sonarscanner-for-msbuild.md" -Destination "build"

            - task: PublishPipelineArtifact@1
              displayName: 'Publish packages as artifacts'
              inputs:
                targetPath: 'build'
                artifact: 'scanner-packages'

            - task: CmdLine@2
              displayName: Revert changes made to pom.xml to not break cache feature
              inputs:
                script: 'git checkout .'

  - template: stage-with-burgr-notifications.yml@commonTemplates
    parameters:
      burgrName: 'qa'
      burgrType: 'qa'
      stageName: 'qa'
      stageDisplayName: 'QA:'
      stageDependencies:
        - build
      jobs:
        - job: its
          displayName: 'Run ITs'
          strategy:
            matrix:
              vs2017_latest89:
                PRODUCT: "SonarQube"
                SQ_VERSION: "LATEST_RELEASE[8.9]"
                SONAR_DOTNET_VERSION: '9.7.0.75501' # sonar-dotnet 9.8 will mention SQ 9.9 as minimum supported version
                SONAR_CFAMILYPLUGIN_VERSION: "6.20.5.49286"  # LATEST_RELEASE of CFAMILY is not compatible with old SQ
                MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\MSBuild.exe"
                JDKVERSION: "1.17"
                TEST_SUITE: "**/SonarQubeTestSuite.java"
              vs2022_latest89:
                PRODUCT: "SonarQube"
                SQ_VERSION: "LATEST_RELEASE[8.9]"
                SONAR_DOTNET_VERSION: '9.7.0.75501' # sonar-dotnet 9.8 will mention SQ 9.9 as minimum supported version
                SONAR_CFAMILYPLUGIN_VERSION: "6.20.5.49286"  # LATEST_RELEASE of CFAMILY is not compatible with old SQ
                MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe"
                JDKVERSION: "1.17"
                TEST_SUITE: "**/SonarQubeTestSuite.java"
              vs2017_latest99:
                PRODUCT: "SonarQube"
                SQ_VERSION: "LATEST_RELEASE[9.9]"
                SONAR_CFAMILYPLUGIN_VERSION: "6.41.0.60884"  # LATEST_RELEASE of CFAMILY is not compatible with old SQ
                MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\MSBuild.exe"
                JDKVERSION: "1.17"
                TEST_SUITE: "**/SonarQubeTestSuite.java"
              vs2019_latest99:
                PRODUCT: "SonarQube"
                SQ_VERSION: "LATEST_RELEASE[9.9]"
                SONAR_CFAMILYPLUGIN_VERSION: "6.41.0.60884"  # LATEST_RELEASE of CFAMILY is not compatible with old SQ
                MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe"
                JDKVERSION: "1.17"
                TEST_SUITE: "**/SonarQubeTestSuite.java"
              vs2022_latest99:
                PRODUCT: "SonarQube"
                SQ_VERSION: "LATEST_RELEASE[9.9]"
                SONAR_CFAMILYPLUGIN_VERSION: "6.41.0.60884" # LATEST_RELEASE of CFAMILY is not compatible with old SQ
                MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe"
                JDKVERSION: "1.17"
                TEST_SUITE: "**/SonarQubeTestSuite.java"
              vs2022_latest:
                PRODUCT: "SonarQube"
                SQ_VERSION: "LATEST_RELEASE"
                SONAR_CFAMILYPLUGIN_VERSION: "LATEST_RELEASE"
                MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe"
                JDKVERSION: "1.17"
                TEST_SUITE: "**/SonarQubeTestSuite.java"
              vs2022_dev:
                PRODUCT: "SonarQube"
                SQ_VERSION: "DEV"
                SONAR_CFAMILYPLUGIN_VERSION: "LATEST_RELEASE"
                MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe"
                JDKVERSION: "1.17"
                TEST_SUITE: "**/SonarQubeTestSuite.java"
              vs2022_sonar_cloud:
                PRODUCT: "SonarCloud"
                SQ_VERSION: ""
                MSBUILD_PATH: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe"
                JDKVERSION: "1.17"
                TEST_SUITE: "**/SonarCloudTestSuite.java"
          variables:
            SONAR_DOTNET_VERSION: 'DEV'
            PLATFORMTOOLSET: 'v140'
            WINDOWSSDKTARGET: '10.0.17763.0'
            MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
            MAVEN_OPTS: '-Xmx3072m -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
          pool: '.net-bubble-aws-re-team-dev'
          steps:
            - checkout: self
              fetchDepth: 1

            - task: CacheBeta@0
              displayName: Cache Maven local repo
              inputs:
                key: maven | its/pom.xml
                path: $(MAVEN_CACHE_FOLDER)

            - task: DownloadSecureFile@1
              displayName: 'Download maven settings'
              name: mavenSettings
              inputs:
                secureFile: 'maven-settings.xml'

            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                itemPattern: |
                  *.zip
                  version.txt
                targetPath: '$(Pipeline.Workspace)\\scanner-packages'
                artifactName: scanner-packages

            - task: NuGetToolInstaller@1
              inputs:
                versionSpec: '5.8.0'

            - task: PowerShell@2
              displayName: "Get version from artifact file and unpack scanner"
              inputs:
                targetType: 'inline'
                script: |
                  $projectVersion = Get-Content "$(Pipeline.Workspace)\\scanner-packages\\version.txt"
                  Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION]$projectVersion"

                  Set-Location "$(Pipeline.Workspace)/scanner-packages"
                  Get-ChildItem -Filter *net-framework.zip | Select-Object -First 1 | Expand-Archive -DestinationPath scanner -Force

            - task: Maven@3
              displayName: 'Run Maven ITs for $(PRODUCT) $(SQ_VERSION)'
              env:
                ARTIFACTORY_QA_READER_PASSWORD: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
                # For Orchestrator (https://github.com/SonarSource/orchestrator/commit/d5396c75ab77e6088afe58e61b0cd0693ac885f0)
                ARTIFACTORY_ACCESS_TOKEN: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
                GITHUB_TOKEN: $(GITHUB_TOKEN)
                MAVEN_LOCAL_REPOSITORY: $(MAVEN_CACHE_FOLDER)
                NUGET_PATH: $(NUGETEXETOOLPATH)
                SCANNER_PATH: "$(Pipeline.Workspace)/scanner-packages/scanner/SonarScanner.MSBuild.exe"
              inputs:
                goals: 'verify'
                options: --settings $(mavenSettings.secureFilePath) -B -e -Denable-repo=qa -DrunSuite=$(TEST_SUITE) -Dsonar.cfamilyplugin.version=$(SONAR_CFAMILYPLUGIN_VERSION) -Dsonar.csharpplugin.version=$(SONAR_DOTNET_VERSION) -Dsonar.vbnetplugin.version=$(SONAR_DOTNET_VERSION) -Dsonar.runtimeVersion=$(SQ_VERSION) -DscannerForMSBuild.version=$(SONAR_PROJECT_VERSION).$(Build.BuildId) -Dmsbuild.path="$(MSBUILD_PATH)" -Dmsbuild.plateformtoolset=$(PLATFORMTOOLSET) -Dmsbuild.windowssdk=$(WINDOWSSDKTARGET)
                publishJUnitResults: true
                mavenPomFile: 'its/pom.xml'
                testResultsFiles: '**/surefire-reports/TEST-*.xml'
                testRunTitle: 'ITs $(SQ_VERSION)'
                javaHomeOption: 'JDKVersion'
                jdkVersionOption: $(JDKVERSION)
                mavenOptions: $(MAVEN_OPTS)
                mavenVersionOption: 'Default'

            - bash: git checkout .
              name: revertPomChanges
              displayName: Revert changes made to pom.xml to not break cache feature

  - template: promote-stage.yml@commonTemplates
    parameters:
      stageName: 'Artifacts:'
      stageDependencies:
        - build
        - qa
